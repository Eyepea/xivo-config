#!/bin/sh

SLAVE_IP=$1
DB_NAME='asterisk'
SLAVE_BACKUP='out_slave_backup.sql'
EXCLUDE_TABLES='--exclude-table cel --exclude-table cel_id_seq --exclude-table queue_log --exclude-table call_log --exclude-table call_log_id_seq'
PG_DUMP_OPTIONS="--clean $EXCLUDE_TABLES"

if [ -z $SLAVE_IP ]; then
    echo "No IP specified"
    echo "Usage: $(basename $0) ip_addr"
fi

panic() {
    echo "Slave replication failed: $*" | mutt root@localhost
    echo "Slave replication failed: $*"
    exit 1
}

cd /tmp

su postgres -c "pg_dump --host $SLAVE_IP $PG_DUMP_OPTIONS $DB_NAME -f $SLAVE_BACKUP"
if [ $? -ne 0 ]; then
    panic "Slave down"
fi

su postgres -c "pg_dump $PG_DUMP_OPTIONS $DB_NAME -f out_master.sql"
master_md5=$(cat out_master.sql | sort > out_master.sorted.sql &&  md5sum out_master.sorted.sql | awk '{print $1}')

asterisk -rx "module reload cel_pgsql.so"

sed -i 's/DROP SCHEMA public;//' out_master.sql
sed -i 's/CREATE SCHEMA public;//' out_master.sql
sed -Ei 's/(DROP FUNCTION public.*);/\1 CASCADE;/' out_master.sql

su postgres -c "psql --host $SLAVE_IP $DB_NAME < out_master.sql > /dev/null"
su postgres -c "pg_dump --host $SLAVE_IP $PG_DUMP_OPTIONS $DB_NAME -f out_slave.sql"

slave_md5=$(cat out_slave.sql | sort > out_slave.sorted.sql && md5sum out_slave.sorted.sql | awk '{print $1}')

if [ "$master_md5" != "$slave_md5" ]; then
    su postgres -c "psql --host $SLAVE_IP $DB_NAME < $SLAVE_BACKUP > /dev/null"
    panic "md5sum didnt match"
else
    echo "Slave replication completed succesfully"
fi
